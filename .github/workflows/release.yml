name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release type (patch, minor, major) or specific version (e.g., 1.2.3)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      publish:
        description: 'Publish to npm'
        required: true
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (don\'t actually publish)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  id-token: write

jobs:
  release:
    name: Release Libraries
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      
      - name: Build and test libraries
        run: |
          pnpm nx run-many -t build -p dynamic-form,dynamic-form-material
          pnpm nx run-many -t test -p dynamic-form,dynamic-form-material --configuration=ci
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Version bump
        run: |
          if [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            pnpm nx release version ${{ github.event.inputs.version }}
          else
            pnpm nx release version ${{ github.event.inputs.version }}
          fi
          
          # Get the new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
      
      - name: Publish to npm (dry-run)
        if: ${{ github.event.inputs.dry_run == 'true' }}
        run: pnpm nx release publish --dry-run
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Publish to npm
        if: ${{ github.event.inputs.publish == 'true' && github.event.inputs.dry_run == 'false' }}
        run: pnpm nx release publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      - name: Push changes
        run: |
          git push --follow-tags